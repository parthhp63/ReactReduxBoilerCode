To implement a React project with authentication, route protection, and validation as described, hereâ€™s how you can set it up:

Step 1: Project Setup
Create a new React app:
bash
Copy code
npx create-react-app my-app --template typescript
cd my-app
Install necessary packages:
bash
Copy code
npm install react-router-dom @reduxjs/toolkit react-redux axios formik yup
Step 2: Create Redux Store
store.ts
typescript
Copy code
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './features/auth/authSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;
Step 3: Auth Reducer and Actions
Reuse your existing reducer (authSlice) and modify actions as needed to store the user in localStorage on login.

Modify authSlice.ts
Add localStorage handling for loginSuccess and logoutSuccess:

typescript
Copy code
loginSuccess: (state, action) => {
  state.status = 'succeeded';
  state.isAuthenticated = true;
  state.message = action.payload;
  state.user = action.payload.user;

  // Save to localStorage
  localStorage.setItem('authUser', JSON.stringify(action.payload.user));
},
logoutSuccess: (state) => {
  state.status = 'succeeded';
  state.isAuthenticated = false;
  state.user = null;

  // Clear localStorage
  localStorage.removeItem('authUser');
},
Step 4: Add Protected Routes
ProtectedRoute.tsx
tsx
Copy code
import React from 'react';
import { Navigate } from 'react-router-dom';

interface ProtectedRouteProps {
  isAuthenticated: boolean;
  children: JSX.Element;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ isAuthenticated, children }) => {
  return isAuthenticated ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;
Step 5: Routing
App.tsx
tsx
Copy code
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { useSelector } from 'react-redux';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import ProtectedRoute from './components/ProtectedRoute';
import { RootState } from './store';

const App: React.FC = () => {
  const { isAuthenticated } = useSelector((state: RootState) => state.auth);

  return (
    <Router>
      <Routes>
        <Route
          path="/login"
          element={!isAuthenticated ? <Login /> : <Navigate to="/dashboard" />}
        />
        <Route
          path="/register"
          element={!isAuthenticated ? <Register /> : <Navigate to="/dashboard" />}
        />
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute isAuthenticated={isAuthenticated}>
              <Dashboard />
            </ProtectedRoute>
          }
        />
        <Route path="*" element={<Navigate to="/dashboard" />} />
      </Routes>
    </Router>
  );
};

export default App;
Step 6: Login and Register Pages
Login.tsx
tsx
Copy code
import React from 'react';
import { useFormik } from 'formik';
import { useDispatch } from 'react-redux';
import { loginAsync } from '../features/auth/authActions';
import * as Yup from 'yup';

const Login: React.FC = () => {
  const dispatch = useDispatch();

  const formik = useFormik({
    initialValues: {
      email: '',
      password: '',
    },
    validationSchema: Yup.object({
      email: Yup.string().email('Invalid email address').required('Required'),
      password: Yup.string().min(6, 'Minimum 6 characters').required('Required'),
    }),
    onSubmit: async (values) => {
      await dispatch(loginAsync(values));
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <div>
        <label>Email</label>
        <input
          type="email"
          {...formik.getFieldProps('email')}
        />
        {formik.touched.email && formik.errors.email ? <div>{formik.errors.email}</div> : null}
      </div>
      <div>
        <label>Password</label>
        <input
          type="password"
          {...formik.getFieldProps('password')}
        />
        {formik.touched.password && formik.errors.password ? <div>{formik.errors.password}</div> : null}
      </div>
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
Register.tsx
Similar to Login.tsx, include fields for firstName, lastName, and confirmPassword with validation.

Step 7: Dashboard Page
Dashboard.tsx
tsx
Copy code
import React from 'react';
import { useDispatch } from 'react-redux';
import { logoutAsync } from '../features/auth/authActions';

const Dashboard: React.FC = () => {
  const dispatch = useDispatch();

  const handleLogout = () => {
    dispatch(logoutAsync());
  };

  return (
    <div>
      <h1>Welcome to Dashboard</h1>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
};

export default Dashboard;
Step 8: API Configuration
Ensure your request.ts file is properly configured with the necessary endpoints.

Step 9: Persist Authentication
Load the user from localStorage on app start.

Modify authSlice.ts
typescript
Copy code
const initialState = {
  user: JSON.parse(localStorage.getItem('authUser') || 'null'),
  isAuthenticated: !!localStorage.getItem('authUser'),
  status: 'idle',
  error: null,
  message: null,
};
With this setup, you now have authentication, routing, and route protection in place for your React project. You can customize the forms, UI, and validations further as per your requirements.
